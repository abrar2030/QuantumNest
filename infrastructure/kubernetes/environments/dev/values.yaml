appName: quantumnest
environment: dev

# Backend configuration
backend:
  replicas: 2
  image:
    repository: registry.example.com/app/backend
    tag: latest
    pullPolicy: Always
  containerPort: 3000
  servicePort: 80
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  apiUrl: http://app-backend
  jwtSecret: dev-jwt-secret
  apiKey: dev-api-key

# Frontend configuration
frontend:
  replicas: 2
  image:
    repository: registry.example.com/app/frontend
    tag: latest
    pullPolicy: Always
  containerPort: 80
  servicePort: 80
  apiUrl: /api
  service:
    type: ClusterIP
  resources:
    limits:
      cpu: 300m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Database configuration
database:
  replicas: 1
  image:
    repository: mysql
    tag: 8.0
    pullPolicy: IfNotPresent
  containerPort: 3306
  servicePort: 3306
  name: quantumnestdb
  user: appuser
  password: dev-password
  rootPassword: dev-root-password
  url: mysql://appuser:dev-password@app-database:3306/appdb
  storageClass: standard
  storage: 10Gi
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

# Redis configuration
redis:
  replicas: 1
  image:
    repository: redis
    tag: 6.2
    pullPolicy: IfNotPresent
  containerPort: 6379
  servicePort: 6379
  storageClass: standard
  storage: 5Gi
  resources:
    limits:
      cpu: 300m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

# Ingress configuration
ingress:
  host: dev.quantumnest.example.com
  class: nginx
  sslRedirect: "true"
  certManager:
    issuer: letsencrypt-staging

# General configuration
logLevel: debug
imagePullSecrets: regcred
